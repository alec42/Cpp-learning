---
title: "Cpp Notes"
author: "Alec James van Rassel"
format: pdf
---

To start learning C++, I used [this website](https://www.learncpp.com/). 

##  Setting up
Need to insure that C++ is installed on the computer. This program is called g++


##  Executing code
Code can be compiled directly from the command line with the command 
`g++ -o file_write_output file_code.cpp -pedantic-errors -Wall -Weffc++ -Wextra -Wsign-conversion`.
+   The `-o` flag tells C++ to write the __o__utput to the specified file of the cpp source code
+   The `-pedantic-errors` flag is reccomended by the tutorial to be as strict as possible
To then run the code, we run it like any other shell script: `./file_write_output`
+   The `-Wall -Weffc++ -Wextra -Wsign-conversion` flag is to have the maximum warnings
    and is strongly reccomended, especially while learning.

##  Compilers
The tutorial explains that there are multiple compilers and that it's possible
for C++ code to compile in one but not the other. For this reason they reccomend 
to disable all individualities of the compiler to follow a standard with the 
`-pedantic-errors` being very strict.

## Standard Library (stl)
One of most used elements are vectors

## Libraries

Types:

1.  Static (.a archive)
1.  Dynamic (shared; .so shared object, .dylib dynamic library, .dll dynamic loaded library)

Considerations:

-   All libraries must begin with the prefix *lib* under unix so that they're recognized as libraries at **link time** (`-l` option)
-   the conmpiler must know a function exists (*declaration*) before being able to call it in code
-   this is why we must publicly expose the library API in header files (.h)
    -   When we include a library, we must also include its public headers

## Objects 

There are 2 ways to instantiate objects:

1.  Stack: has a lifespan limited by the scope of its declaration location 
-   The memory used to store the object in surface is the stack's memory, thus it's automatically generated at execution

Example:
```
{
    A a; // instanciation on the stack
    std::cout << a.i << std::endl;
} // call of deconstructor, a.~A() is generated at compilation
```

2.  Heap (`new`): unlimited lifespan, must be manually uninstantiated (a.k.a. *dynamic allocation*)
-   Requries allocation memory 'sur le tas' (**heap**) dynamically (while executing the program)
-   Since we're allocating a specific portion of memory to the object, it's important to de-instanciate it to recover the memory and not have a **leak**

Example:
```
{
    A *a = new A;
    // some operations
    delete a;
}
```
